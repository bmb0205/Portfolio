{"version":3,"sources":["dropdown/dropdown.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;4BAII,qBAFZ,gBAAgB,aAAhB,WACA,OAAO,OAAP,WAIE,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB;AAID,iBAlCW,UAkCX,CAAY,OAAZ,EAAqB;gCAlCV,YAkCU;;;;;;;;;;;;;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CAFmB;SAArB;;AAlCW,6BAuCX,+BAAW;AACT,eAAK,qBAAL,GADS;AAET,eAAK,uBAAL,GAA+B,IAAI,gBAAJ,CAAqB,SAAS,cAAT,CAAwB,KAAK,SAAL,CAA7C,CAA/B,CAFS;;AAIT,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,iBAAjC,EAJS;AAKT,eAAK,uBAAL,CAA6B,UAA7B,CAAwC,kBAAxC,EALS;;;AAQT,YAAE,KAAK,OAAL,CAAF,CAAgB,QAAhB,CAAyB;AACvB,uBAAW,KAAK,SAAL;AACX,yBAAa,6BAA6B,KAAK,WAAL,CAA1C;AACA,6BAAiB,6BAA6B,KAAK,cAAL,CAA9C;AACA,oBAAQ,SAAS,KAAK,MAAL,EAAa,EAAtB,CAAR;AACA,mBAAO,6BAA6B,KAAK,KAAL,CAApC;AACA,wBAAY,SAAS,KAAK,UAAL,EAAiB,EAA1B,CAAZ;AACA,yBAAa,SAAS,KAAK,WAAL,EAAkB,EAA3B,CAAb;WAPF,EARS;;;AAvCA,6BA0DX,+BAAW;AACT,eAAK,gBAAL,CAAsB,gBAAtB,CAAuC,gBAAvC,EADS;AAET,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,iBAApC,EAFS;AAGT,eAAK,uBAAL,CAA6B,aAA7B,CAA2C,kBAA3C,EAHS;;;AA1DA,6BAgEX,yDAAwB;AACtB,cAAI,KAAK,GAAL,EAAU;AACZ,gBAAI,KAAK,KAAK,GAAL,CAAS,YAAT,CAAsB,IAAtB,CAAL,CADQ;AAEZ,gBAAI,CAAC,EAAD,EAAK;AACP,oCAAoB,WAAW,SAAX,EAApB,CADO;AAEP,mBAAK,GAAL,CAAS,YAAT,CAAsB,IAAtB,EAA4B,EAA5B,EAFO;AAGP,mBAAK,SAAL,GAAiB,EAAjB,CAHO;aAAT;AAKA,iBAAK,EAAL,GAAU,WAAW,SAAX,EAAV,CAPY;WAAd;AASA,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,kBAAkB,KAAK,SAAL,EAAxD,EAVsB;;;eAhEb;mBACJ,YAAY;;;iBAIJ;;;;;iBAGN;;;;;iBAGM;;;;;iBAGE;;;;;iBAGG;;;;;iBAGR;;;;;iBAGD;;;;;;;;iBAMK;;;;;iBAGC","file":"dropdown/dropdown.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customAttribute('md-dropdown')\n@inject(Element)\nexport class MdDropdown {\n  static elementId = 0;\n\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) activates = '';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) ref = null;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) alignment = 'left';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) belowOrigin = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) constrainWidth = true;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) gutter = 0;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) hover = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdTitle;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) inDuration = 300;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) outDuration = 225;\n\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    this.handleActivateElement();\n    this.contentAttributeManager = new AttributeManager(document.getElementById(this.activates));\n\n    this.attributeManager.addClasses('dropdown-button');\n    this.contentAttributeManager.addClasses('dropdown-content');\n    // this.attributeManager.addAttributes({ 'data-activates': this.activates });\n\n    $(this.element).dropdown({\n      alignment: this.alignment,\n      belowOrigin: getBooleanFromAttributeValue(this.belowOrigin),\n      constrain_width: getBooleanFromAttributeValue(this.constrainWidth),\n      gutter: parseInt(this.gutter, 10),\n      hover: getBooleanFromAttributeValue(this.hover),\n      inDuration: parseInt(this.inDuration, 10),\n      outDuration: parseInt(this.outDuration, 10)\n    });\n  }\n\n  detached() {\n    this.attributeManager.removeAttributes('data-activates');\n    this.attributeManager.removeClasses('dropdown-button');\n    this.contentAttributeManager.removeClasses('dropdown-content');\n  }\n\n  handleActivateElement() {\n    if (this.ref) {\n      let id = this.ref.getAttribute('id');\n      if (!id) {\n        id = `md-dropdown-${MdDropdown.elementId++}`;\n        this.ref.setAttribute('id', id);\n        this.activates = id;\n      }\n      this.id = MdDropdown.elementId++;\n    }\n    this.attributeManager.addAttributes({ 'data-activates': this.activates });\n  }\n}\n"]}