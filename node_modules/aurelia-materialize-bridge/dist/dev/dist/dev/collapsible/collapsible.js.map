{"version":3,"sources":["collapsible/collapsible.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;;+BAOI,wBALZ,gBAAgB,gBAAhB,WACA,SAAS,EAAE,MAAM,WAAN,EAAmB,cAAc,KAAd,EAA9B,WACA,SAAS,EAAE,MAAM,QAAN,EAAgB,cAAc,KAAd,EAA3B,WACA,OAAO,OAAP;AAGC,iBADW,aACX,CAAY,OAAZ,EAAqB;gCADV,eACU;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CAFmB;SAArB;;AADW,gCAMX,+BAAW;AACT,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,aAAjC,EADS;AAET,cAAI,6BAA6B,KAAK,MAAL,CAAjC,EAA+C;AAC7C,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,QAAjC,EAD6C;WAA/C;AAGA,eAAK,OAAL,GALS;;;AANA,gCAcX,+BAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,aAAD,EAAgB,QAAhB,CAApC,EADS;AAET,eAAK,gBAAL,CAAsB,gBAAtB,CAAuC,CAAC,kBAAD,CAAvC,EAFS;;;AAdA,gCAmBX,6BAAU;AACR,cAAI,YAAY,6BAA6B,KAAK,SAAL,CAAzC,CADI;AAER,cAAI,SAAJ,EAAe;AACb,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,oBAAoB,WAApB,EAAtC,EADa;WAAf,MAEO;AACL,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,oBAAoB,YAApB,EAAtC,EADK;WAFP;;AAMA,YAAE,KAAK,OAAL,CAAF,CAAgB,WAAhB,CAA4B;AAC1B,gCAD0B;WAA5B,EARQ;;;AAnBC,gCAgCX,+CAAmB;AACjB,eAAK,OAAL,GADiB;;;eAhCR","file":"collapsible/collapsible.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { AttributeManager } from '../common/attributeManager';\n\n@customAttribute('md-collapsible')\n@bindable({ name: 'accordion', defaultValue: false })\n@bindable({ name: 'popout', defaultValue: false })\n@inject(Element)\n\nexport class MdCollapsible {\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    this.attributeManager.addClasses('collapsible');\n    if (getBooleanFromAttributeValue(this.popout)) {\n      this.attributeManager.addClasses('popout');\n    }\n    this.refresh();\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['collapsible', 'popout']);\n    this.attributeManager.removeAttributes(['data-collapsible']);\n  }\n\n  refresh() {\n    let accordion = getBooleanFromAttributeValue(this.accordion);\n    if (accordion) {\n      this.attributeManager.addAttributes({ 'data-collapsible': 'accordion' });\n    } else {\n      this.attributeManager.addAttributes({ 'data-collapsible': 'expandable' });\n    }\n\n    $(this.element).collapsible({\n      accordion\n    });\n  }\n\n  accordionChanged() {\n    this.refresh();\n  }\n}\n"]}