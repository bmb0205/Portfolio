{"version":3,"sources":["switch/switch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACD;;;0BAIK,mBAFZ,cAAc,WAAd,WACA,OAAO,OAAP,WAEE,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,oBACA,oBACA;AAED,iBARW,QAQX,CAAY,OAAZ,EAAqB;gCARV,UAQU;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB,CAFmB;SAArB;;AARW,2BAaX,+BAAW;AACT,eAAK,QAAL,CAAc,OAAd,GAAwB,6BAA6B,KAAK,SAAL,CAArD,CADS;AAET,cAAI,6BAA6B,KAAK,UAAL,CAAjC,EAAmD;AACjD,iBAAK,QAAL,CAAc,QAAd,GAAyB,IAAzB,CADiD;WAAnD;AAGA,eAAK,QAAL,CAAc,gBAAd,CAA+B,QAA/B,EAAyC,KAAK,YAAL,CAAzC,CALS;;;AAbA,2BAqBX,+BAAW;AACT,eAAK,QAAL,CAAc,mBAAd,CAAkC,QAAlC,EAA4C,KAAK,YAAL,CAA5C,CADS;;;AArBA,2BAyBX,uCAAe;AACb,eAAK,SAAL,GAAiB,KAAK,QAAL,CAAc,OAAd,CADJ;AAEb,oBAAU,KAAK,OAAL,EAAc,MAAxB,EAFa;;;AAzBJ,2BA8BX,uBAAO;AACL,oBAAU,KAAK,OAAL,EAAc,MAAxB,EADK;;;AA9BI,2BAkCX,6CAAiB,UAAU;AACzB,cAAI,KAAK,QAAL,EAAe;AACjB,iBAAK,QAAL,CAAc,OAAd,GAAwB,CAAC,CAAC,QAAD,CADR;WAAnB;;;AAnCS,2BAwCX,+CAAkB,UAAU;AAC1B,cAAI,KAAK,QAAL,EAAe;AACjB,iBAAK,QAAL,CAAc,QAAd,GAAyB,CAAC,CAAC,QAAD,CADT;WAAnB;;;eAzCS;;;;;;;;;;iBAKc;;;;;iBACD","file":"switch/switch.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport {fireEvent} from '../common/events';\n\n@customElement('md-switch')\n@inject(Element)\nexport class MdSwitch {\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdChecked;\n  @bindable() mdDisabled;\n  @bindable() mdLabelOff = 'Off';\n  @bindable() mdLabelOn = 'On';\n\n  constructor(element) {\n    this.element = element;\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  attached() {\n    this.checkbox.checked = getBooleanFromAttributeValue(this.mdChecked);\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\n      this.checkbox.disabled = true;\n    }\n    this.checkbox.addEventListener('change', this.handleChange);\n  }\n\n  detached() {\n    this.checkbox.removeEventListener('change', this.handleChange);\n  }\n\n  handleChange() {\n    this.mdChecked = this.checkbox.checked;\n    fireEvent(this.element, 'blur');\n  }\n\n  blur() {\n    fireEvent(this.element, 'blur');\n  }\n\n  mdCheckedChanged(newValue) {\n    if (this.checkbox) {\n      this.checkbox.checked = !!newValue;\n    }\n  }\n\n  mdDisabledChanged(newValue) {\n    if (this.checkbox) {\n      this.checkbox.disabled = !!newValue;\n    }\n  }\n}\n"]}