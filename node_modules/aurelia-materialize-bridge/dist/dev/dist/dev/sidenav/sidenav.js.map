{"version":3,"sources":["sidenav/sidenav.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;2BAII,oBAFZ,cAAc,YAAd,WACA,OAAO,OAAP,WAGE,oBACA,oBACA,oBACA;AAKD,iBAVW,SAUX,CAAY,OAAZ,EAAqB;;;gCAVV,WAUU;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,SAAL,mBAA+B,UAAU,EAAV,EAA/B,CAFmB;AAGnB,eAAK,GAAL,GAAW,UAAU,YAAV,CAAX,CAHmB;AAInB,eAAK,YAAL,GAAoB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACnD,kBAAK,gBAAL,GAAwB,OAAxB,CADmD;WAArB,CAAhC,CAJmB;SAArB;;AAVW,4BAmBX,+BAAW;AACT,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CADS;AAET,cAAI,6BAA6B,KAAK,OAAL,CAAjC,EAAgD;AAC9C,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC,EAD8C;AAE9C,gBAAI,KAAK,MAAL,KAAgB,OAAhB,EAAyB;AAE3B,mBAAK,gBAAL,CAAsB,UAAtB,CAAiC,eAAjC,EAF2B;aAA7B;WAFF;;AAQA,eAAK,gBAAL,GAVS;;;AAnBA,4BAgCX,+BAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,OAAD,EAAU,eAAV,CAApC,EADS;;;AAhCA,4BAoCX,yCAAe,UAAU;AACvB,cAAI,KAAK,gBAAL,EAAuB;AACzB,gBAAI,6BAA6B,QAA7B,CAAJ,EAA4C;AAC1C,mBAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC,EAD0C;aAA5C,MAEO;AACL,mBAAK,gBAAL,CAAsB,aAAtB,CAAoC,OAApC,EADK;aAFP;WADF;;;eArCS;mBACJ,KAAK;;;iBACiB;;;;;iBACR;;;;;iBACC;;;;;iBACA","file":"sidenav/sidenav.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getLogger } from 'aurelia-logging';\n\n@customElement('md-sidenav')\n@inject(Element)\nexport class MdSidenav {\n  static id = 0;\n  @bindable() mdCloseOnClick = false;\n  @bindable() mdEdge = 'left';\n  @bindable() mdFixed = false;\n  @bindable() mdWidth = 300;\n\n  attachedResolver;\n  whenAttached;\n\n  constructor(element) {\n    this.element = element;\n    this.controlId = `md-sidenav-${MdSidenav.id++}`;\n    this.log = getLogger('md-sidenav');\n    this.whenAttached = new Promise((resolve, reject) => {\n      this.attachedResolver = resolve;\n    });\n  }\n\n  attached() {\n    this.attributeManager = new AttributeManager(this.sidenav);\n    if (getBooleanFromAttributeValue(this.mdFixed)) {\n      this.attributeManager.addClasses('fixed');\n      if (this.mdEdge === 'right') {\n        // see: https://github.com/aurelia-ui-toolkits/aurelia-materialize-bridge/issues/53\n        this.attributeManager.addClasses('right-aligned');\n      }\n    }\n\n    this.attachedResolver();\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['fixed', 'right-aligned']);\n  }\n\n  mdFixedChanged(newValue) {\n    if (this.attributeManager) {\n      if (getBooleanFromAttributeValue(newValue)) {\n        this.attributeManager.addClasses('fixed');\n      } else {\n        this.attributeManager.removeClasses('fixed');\n      }\n    }\n  }\n}\n"]}