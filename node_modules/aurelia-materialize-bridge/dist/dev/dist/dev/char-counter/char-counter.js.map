{"version":3,"sources":["char-counter/char-counter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;;+BAII,wBAFZ,gBAAgB,iBAAhB,WACA,OAAO,OAAP,WAEE;AAED,iBAHW,aAGX,CAAY,OAAZ,EAAqB;gCAHV,eAGU;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CAFmB;SAArB;;AAHW,gCAQX,+BAAW;;;AACT,eAAK,MAAL,GAAc,SAAS,KAAK,MAAL,EAAa,EAAtB,CAAd,CADS;;AAKT,cAAI,KAAK,OAAL,CAAa,OAAb,CAAqB,WAArB,OAAuC,OAAvC,EAAgD;AAClD,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,UAAU,KAAK,MAAL,EAAhD,EADkD;AAElD,cAAE,KAAK,OAAL,CAAF,CAAgB,gBAAhB,GAFkD;WAApD,MAGO;AACL,cAAE,KAAK,OAAL,CAAF,CAAgB,IAAhB,CAAqB,OAArB,EAA8B,IAA9B,CAAmC,UAAC,CAAD,EAAI,EAAJ,EAAW;AAAE,gBAAE,EAAF,EAAM,IAAN,CAAW,QAAX,EAAqB,MAAK,MAAL,CAArB,CAAF;aAAX,CAAnC,CADK;AAEL,cAAE,KAAK,OAAL,CAAF,CAAgB,IAAhB,CAAqB,OAArB,EAA8B,gBAA9B,GAFK;WAHP;;;AAbS,gCAsBX,+BAAW;AACT,eAAK,gBAAL,CAAsB,gBAAtB,CAAuC,CAAC,QAAD,CAAvC,EADS;;;eAtBA;;;;iBACU","file":"char-counter/char-counter.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\n\r\n@customAttribute('md-char-counter')\r\n@inject(Element)\r\nexport class MdCharCounter {\r\n  @bindable() length = 120;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    this.length = parseInt(this.length, 10);\r\n\r\n    // attach to input element explicitly, so this counter can be used on\r\n    // containers (or custom elements like md-input)\r\n    if (this.element.tagName.toUpperCase() === 'INPUT') {\r\n      this.attributeManager.addAttributes({ 'length': this.length });\r\n      $(this.element).characterCounter();\r\n    } else {\r\n      $(this.element).find('input').each((i, el) => { $(el).attr('length', this.length); });\r\n      $(this.element).find('input').characterCounter();\r\n    }\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeAttributes(['length']);\r\n  }\r\n}\r\n"]}