{"version":3,"sources":["radio/radio.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;yBAII,kBAFZ,cAAc,UAAd,WACA,OAAO,OAAP,WAGE,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,oBACA,oBACA,oBACA,oBACA;AAED,iBAXW,OAWX,CAAY,OAAZ,EAAqB;gCAXV,SAWU;;;;;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,SAAL,iBAA6B,QAAQ,EAAR,EAA7B,CAFmB;SAArB;;AAXW,0BAiBX,+BAAW;AACT,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,KAAL,CAA7C,CADS;AAET,cAAI,6BAA6B,KAAK,KAAL,CAAjC,EAA8C;AAC5C,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,UAAjC,EAD4C;WAA9C;AAGA,cAAI,6BAA6B,KAAK,UAAL,CAAjC,EAAmD;AACjD,iBAAK,KAAL,CAAW,QAAX,GAAsB,IAAtB,CADiD;WAAnD;;;AAtBS,0BA6BX,+BAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,UAAD,EAAa,UAAb,CAApC,EADS;;;AA7BA,0BA4CX,+CAAkB,UAAU;AAC1B,cAAI,KAAK,KAAL,EAAY;AACd,iBAAK,KAAL,CAAW,QAAX,GAAsB,CAAC,CAAC,QAAD,CADT;WAAhB;;;eA7CS;mBACJ,KAAK;;;;;;iBAIa;;;;;iBACL;;;;;;;;iBAEC;;;;;iBACC","file":"radio/radio.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customElement('md-radio')\n@inject(Element)\nexport class MdRadio {\n  static id = 0;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdChecked;\n  @bindable() mdDisabled = false;\n  @bindable() mdGap = false;\n  @bindable() mdModel;\n  @bindable() mdName = '';\n  @bindable() mdValue = '';\n\n  constructor(element) {\n    this.element = element;\n    this.controlId = `md-radio-${MdRadio.id++}`;\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  attached() {\n    this.attributeManager = new AttributeManager(this.radio);\n    if (getBooleanFromAttributeValue(this.mdGap)) {\n      this.attributeManager.addClasses('with-gap');\n    }\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\n      this.radio.disabled = true;\n    }\n    // this.radio.checked = getBooleanFromAttributeValue(this.mdChecked);\n    // this.radio.addEventListener('change', this.handleChange);\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['with-gap', 'disabled']);\n    // this.radio.removeEventListener('change', this.handleChange);\n  }\n\n  // handleChange() {\n  //   this.mdChecked = this.radio.checked;\n  // }\n\n  // mdCheckedChanged(newValue) {\n  //   if (this.radio) {\n  //     this.radio.checked = !!newValue;\n  //   }\n  // }\n\n  mdDisabledChanged(newValue) {\n    if (this.radio) {\n      this.radio.disabled = !!newValue;\n    }\n  }\n}\n"]}