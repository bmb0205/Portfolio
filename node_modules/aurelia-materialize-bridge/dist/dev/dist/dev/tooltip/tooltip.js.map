{"version":3,"sources":["tooltip/tooltip.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;;2BAII,oBAFZ,gBAAgB,YAAhB,WACA,OAAO,OAAP,WAEE,oBACA,oBACA,oBACA;AAED,iBANW,SAMX,CAAY,OAAZ,EAAqB;gCANV,WAMU;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CAFmB;SAArB;;AANW,4BAWX,uBAAO;AACL,eAAK,IAAL,GAAY,6BAA6B,KAAK,IAAL,CAAzC,CADK;;;AAXI,4BAeX,+BAAW;AACT,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,YAAjC,EADS;AAET,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,iBAAiB,KAAK,QAAL,EAAe,gBAAgB,KAAK,IAAL,EAAtF,EAFS;AAGT,eAAK,WAAL,GAHS;;;AAfA,4BAqBX,+BAAW;AACT,YAAE,KAAK,OAAL,CAAF,CAAgB,OAAhB,CAAwB,QAAxB,EADS;AAET,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,YAApC,EAFS;AAGT,eAAK,gBAAL,CAAsB,gBAAtB,CAAuC,CAAC,eAAD,EAAkB,cAAlB,CAAvC,EAHS;;;AArBA,4BA2BX,qCAAc;AACZ,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,gBAAgB,KAAK,IAAL,EAAtD,EADY;AAEZ,eAAK,WAAL,GAFY;;;AA3BH,4BAgCX,qCAAc;AACZ,YAAE,KAAK,OAAL,CAAF,CAAgB,OAAhB,CAAwB,QAAxB,EADY;AAEZ,YAAE,KAAK,OAAL,CAAF,CAAgB,OAAhB,CAAwB;AACtB,mBAAO,SAAS,KAAK,KAAL,EAAY,EAArB,CAAP;AACA,kBAAM,KAAK,IAAL;WAFR,EAFY;;;eAhCH;;;;iBACY;;;;;iBACH;;;;;iBACD;;;;;iBACA","file":"tooltip/tooltip.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customAttribute('md-tooltip')\n@inject(Element)\nexport class MdTooltip {\n  @bindable() position = 'bottom';\n  @bindable() delay = 50;\n  @bindable() html = false;\n  @bindable() text = '';\n\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  bind() {\n    this.html = getBooleanFromAttributeValue(this.html);\n  }\n\n  attached() {\n    this.attributeManager.addClasses('tooltipped');\n    this.attributeManager.addAttributes({ 'data-position': this.position, 'data-tooltip': this.text });\n    this.initTooltip();\n  }\n\n  detached() {\n    $(this.element).tooltip('remove');\n    this.attributeManager.removeClasses('tooltipped');\n    this.attributeManager.removeAttributes(['data-position', 'data-tooltip']);\n  }\n\n  textChanged() {\n    this.attributeManager.addAttributes({ 'data-tooltip': this.text });\n    this.initTooltip();\n  }\n\n  initTooltip() {\n    $(this.element).tooltip('remove');\n    $(this.element).tooltip({\n      delay: parseInt(this.delay, 10),\n      html: this.html\n    });\n  }\n}\n"]}