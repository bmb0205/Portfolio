{"version":3,"sources":["input/input.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;AACA;;AACA;;;yBAII,kBAFZ,cAAc,UAAd,WACA,OAAO,OAAP,EAAgB,SAAhB,EAA2B,oBAA3B,WAIE,oBACA,oBACA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,qBACA,qBACA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB;AAMD,iBA/BW,OA+BX,CAAY,OAAZ,EAAqB,SAArB,EAAgC,aAAhC,EAA+C;gCA/BpC,SA+BoC;;;;;;;;;;;;;;;;;;;;;;;;eAF/C,iBAAiB,MAE8B;;AAC7C,eAAK,OAAL,GAAe,OAAf,CAD6C;AAE7C,eAAK,SAAL,GAAiB,SAAjB,CAF6C;AAG7C,eAAK,SAAL,iBAA6B,QAAQ,EAAR,EAA7B,CAH6C;AAI7C,eAAK,aAAL,GAAqB,aAArB,CAJ6C;SAA/C;;AA/BW,0BAsCX,uBAAO;AACL,eAAK,UAAL,GAAkB,6BAA6B,KAAK,UAAL,CAA/C,CADK;AAEL,eAAK,eAAL,GAAuB,6BAA6B,KAAK,eAAL,CAApD,CAFK;;;AAtCI,0BA2CX,+BAAW;AACT,cAAI,6BAA6B,KAAK,UAAL,CAAjC,EAAmD;AACjD,iBAAK,KAAL,CAAW,SAAX,CAAqB,GAArB,CAAyB,UAAzB,EADiD;WAAnD;AAGA,cAAI,KAAK,eAAL,EAAuB;AACzB,iBAAK,KAAL,CAAW,YAAX,CAAwB,YAAxB,EAAsC,KAAK,eAAL,CAAtC,CADyB;WAA3B;AAGA,cAAI,KAAK,iBAAL,EAAyB;AAC3B,iBAAK,KAAL,CAAW,YAAX,CAAwB,cAAxB,EAAwC,KAAK,iBAAL,CAAxC,CAD2B;WAA7B;AAGA,cAAI,KAAK,aAAL,EAAoB;AACtB,iBAAK,KAAL,CAAW,YAAX,CAAwB,aAAxB,EAAuC,KAAK,aAAL,CAAvC,CADsB;WAAxB;AAGA,cAAI,KAAK,eAAL,EAAsB;AACxB,iBAAK,KAAL,CAAW,YAAX,CAAwB,qBAAxB,EAA+C,KAAK,eAAL,CAA/C,CADwB;WAA1B;AAGA,eAAK,aAAL,CAAmB,MAAnB,GAhBS;;AAmBT,cAAI,KAAK,MAAL,KAAgB,MAAhB,EAAwB;AAC1B,cAAE,KAAK,KAAL,CAAF,CAAc,QAAd,CAAuB,OAAvB,EAAgC,QAAhC,CAAyC,QAAzC,EAD0B;WAA5B;;;AA9DS,0BAmEX,uBAAO;AACL,oBAAU,KAAK,OAAL,EAAc,MAAxB,EADK;;;AAnEI,0BAuEX,2CAAiB;AACf,cAAI,CAAC,EAAE,KAAK,KAAL,CAAF,CAAc,EAAd,CAAiB,QAAjB,CAAD,EAA6B;AAC/B,iBAAK,aAAL,CAAmB,MAAnB,GAD+B;WAAjC;AAGA,cAAI,KAAK,UAAL,EAAiB;AACnB,cAAE,KAAK,KAAL,CAAF,CAAc,OAAd,CAAsB,YAAtB,EADmB;WAArB;;;eA3ES;mBACJ,KAAK;;;iBAEU;;;;;iBACG;;;;;iBAGN;;;;;iBAGH;;;;;iBAGJ;;;;;iBAGA;;;;;iBAGI;;;;;iBAGK;;;;;;;;;;;iBAKR","file":"input/input.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { TaskQueue } from 'aurelia-task-queue';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { MdInputUpdateService } from './input-update-service';\nimport { fireEvent } from '../common/events';\n\n@customElement('md-input')\n@inject(Element, TaskQueue, MdInputUpdateService)\nexport class MdInput {\n  static id = 0;\n\n  @bindable() mdLabel = '';\n  @bindable() mdDisabled = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdPlaceholder = '';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdTextArea = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdType = 'text';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdStep = 'any';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdValidate = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdShowErrortext = true;\n  @bindable() mdValidateError;\n  @bindable() mdValidateSuccess;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdValue = '';\n\n  _suspendUpdate = false;\n\n  constructor(element, taskQueue, updateService) {\n    this.element = element;\n    this.taskQueue = taskQueue;\n    this.controlId = `md-input-${MdInput.id++}`;\n    this.updateService = updateService;\n  }\n\n  bind() {\n    this.mdTextArea = getBooleanFromAttributeValue(this.mdTextArea);\n    this.mdShowErrortext = getBooleanFromAttributeValue(this.mdShowErrortext);\n  }\n\n  attached() {\n    if (getBooleanFromAttributeValue(this.mdValidate)) {\n      this.input.classList.add('validate');\n    }\n    if (this.mdValidateError)  {\n      this.label.setAttribute('data-error', this.mdValidateError);\n    }\n    if (this.mdValidateSuccess)  {\n      this.label.setAttribute('data-success', this.mdValidateSuccess);\n    }\n    if (this.mdPlaceholder) {\n      this.input.setAttribute('placeholder', this.mdPlaceholder);\n    }\n    if (this.mdShowErrortext) {\n      this.input.setAttribute('data-show-errortext', this.mdShowErrortext);\n    }\n    this.updateService.update();\n\n    // special case: time inputs are not covered by Materialize\n    if (this.mdType === 'time') {\n      $(this.input).siblings('label').addClass('active');\n    }\n  }\n\n  blur() {\n    fireEvent(this.element, 'blur');\n  }\n\n  mdValueChanged() {\n    if (!$(this.input).is(':focus')) {\n      this.updateService.update();\n    }\n    if (this.mdTextArea) {\n      $(this.input).trigger('autoresize');\n    }\n  }\n}\n"]}