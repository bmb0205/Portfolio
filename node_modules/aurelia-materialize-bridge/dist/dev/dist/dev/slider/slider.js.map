{"version":3,"sources":["slider/slider.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;AAAe;;AACzB;;AACA;;AACA;;AACA;;;0BAYI,mBAVZ,cAAc,WAAd,WACA,OAAO,OAAP,WACA,oKASE,SAAS,EAAE,oBAAoB,YAAY,OAAZ,EAA/B,WACA,SAAS,EAAE,oBAAoB,YAAY,OAAZ,EAA/B,WACA,oBACA,SAAS,EAAE,oBAAoB,YAAY,OAAZ,EAA/B,WACA,SAAS,EAAE,oBAAoB,YAAY,OAAZ,EAA/B;AAED,iBAPW,QAOX,CAAY,OAAZ,EAAqB;gCAPV,UAOU;;;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,GAAL,GAAW,UAAU,WAAV,CAAX,CAFmB;SAArB;;AAPW,2BAYX,+BAAW;AACT,cAAI,6BAA6B,KAAK,eAAL,CAAjC,EAAwD;AACtD,iBAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,YAA3B,EADsD;WAAxD;AAGA,eAAK,OAAL,GAJS;;;AAZA,2BAmBX,yBAAQ;AACN,YAAE,KAAK,OAAL,CAAF,CAAgB,MAAhB,CAAuB,OAAvB,EADM;;;AAnBG,2BAuBX,yBAAQ;AACN,YAAE,KAAK,OAAL,CAAF,CAAgB,MAAhB,CAAuB,OAAvB,EADM;;;AAvBG,2BA2BX,uBAAO;AACL,YAAE,KAAK,OAAL,CAAF,CAAgB,MAAhB,CAAuB,MAAvB,EADK;;;AA3BI,2BA+BX,uBAAO;AACL,YAAE,KAAK,OAAL,CAAF,CAAgB,MAAhB,CAAuB,MAAvB,EADK;;;AA/BI,2BAmCX,6BAAU;AACR,cAAI,UAAU;AACZ,oBAAQ,SAAS,KAAK,QAAL,EAAe,EAAxB,CAAR;AACA,wBAAY,6BAA6B,KAAK,YAAL,CAAzC;AACA,sBAAU,SAAS,KAAK,UAAL,EAAiB,EAA1B,CAAV;AACA,wBAAY,SAAS,KAAK,YAAL,EAAmB,EAA5B,CAAZ;WAJE,CADI;AAOR,eAAK,GAAL,CAAS,KAAT,CAAe,4BAAf,EAA6C,OAA7C,EAPQ;AAQR,YAAE,KAAK,OAAL,CAAF,CAAgB,MAAhB,CAAuB,OAAvB,EARQ;;;AAnCC,2BA8CX,qDAAsB;AACpB,eAAK,OAAL,GADoB;;;eA9CX;;;;iBAC8D;;;;;iBACP;;;;;iBACvC;;;;;iBACyC;;;;;iBACE","file":"slider/slider.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement, inlineView } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { getLogger } from 'aurelia-logging';\n\n@customElement('md-slider')\n@inject(Element)\n@inlineView(`\n  <template class=\"slider\">\n  <require from=\"./slider.css\"></require>\n  <ul class=\"slides\">\n    <slot></slot>\n  </ul>\n  </template>\n`)\nexport class MdSlider {\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdFillContainer = false;\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdHeight = 400;\n  @bindable() mdIndicators = true;\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdInterval = 6000;\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdTransition = 500;\n\n  constructor(element) {\n    this.element = element;\n    this.log = getLogger('md-slider');\n  }\n\n  attached() {\n    if (getBooleanFromAttributeValue(this.mdFillContainer)) {\n      this.element.classList.add('fullscreen');\n    }\n    this.refresh();\n  }\n\n  pause() {\n    $(this.element).slider('pause');\n  }\n\n  start() {\n    $(this.element).slider('start');\n  }\n\n  next() {\n    $(this.element).slider('next');\n  }\n\n  prev() {\n    $(this.element).slider('prev');\n  }\n\n  refresh() {\n    let options = {\n      height: parseInt(this.mdHeight, 10),\n      indicators: getBooleanFromAttributeValue(this.mdIndicators),\n      interval: parseInt(this.mdInterval, 10),\n      transition: parseInt(this.mdTransition, 10)\n    };\n    this.log.debug('refreshing slider, params:', options);\n    $(this.element).slider(options);\n  }\n\n  mdIndicatorsChanged() {\n    this.refresh();\n  }\n\n  // commented since that leads to strange effects\n  // mdIntervalChanged() {\n  //   this.refresh();\n  // }\n  //\n  // mdTransitionChanged() {\n  //   this.refresh();\n  // }\n}\n"]}