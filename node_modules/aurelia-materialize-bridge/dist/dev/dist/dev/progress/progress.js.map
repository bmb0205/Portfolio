{"version":3,"sources":["progress/progress.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;;4BAII,qBAFZ,cAAc,aAAd,WACA,OAAO,OAAP,WAEE,oBACA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,oBACA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB;AAID,iBAbW,UAaX,CAAY,OAAZ,EAAqB;gCAbV,YAaU;;;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;SAArB;;AAbW,6BAqBX,uBAAO;;AArBI,6BA0BX,+BAAW;AACT,eAAK,kBAAL,CAAwB,KAAK,WAAL,CAAxB,CADS;;;AA1BA,6BA8BX,uCAAc,UAAU;AACtB,eAAK,WAAL,GAAmB,IAAnB,CADsB;;;AA9Bb,6BAkCX,iDAAmB,UAAU;AAC3B,cAAI,KAAK,OAAL,EAAc;AAChB,uBAAW,QAAC,KAAa,IAAb,IAAqB,aAAa,EAAb,IAAmB,MAAM,QAAN,CAAxC,GAA2D,EAA5D,GAAoE,eAApE,CADK;AAEhB,iBAAK,OAAL,CAAa,KAAb,CAAmB,MAAnB,GAA4B,QAA5B,CAFgB;AAGhB,iBAAK,OAAL,CAAa,KAAb,CAAmB,KAAnB,GAA2B,QAA3B,CAHgB;WAAlB;;;eAnCS;;;;iBACW;;;;;iBAGL;;;;;iBACI;;;;;iBAGT;;;;;iBAGC","file":"progress/progress.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\n\n@customElement('md-progress')\n@inject(Element)\nexport class MdProgress {\n  @bindable() mdColor = null;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdPixelSize = null;\n  @bindable() mdSize = 'big';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdType = 'linear';\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdValue = null;\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  // mdValueChanged(newValue, oldValue) {\n  //   console.log('mdValueChanged, newValue:', JSON.stringify(newValue), 'oldValue:', JSON.stringify(oldValue));\n  // }\n\n  bind() {\n    // This disables property changed callbacks for any bindable properties during initialization\n    // Prevents mdPixelSize getting cleared by the mdSizeChanged event during binding\n  }\n\n  attached() {\n    this.mdPixelSizeChanged(this.mdPixelSize);\n  }\n\n  mdSizeChanged(newValue) {\n    this.mdPixelSize = null;\n  }\n\n  mdPixelSizeChanged(newValue) {\n    if (this.wrapper) {\n      newValue = (newValue === null || newValue === '' || isNaN(newValue)) ? '' : `${newValue}px`;\n      this.wrapper.style.height = newValue;\n      this.wrapper.style.width = newValue;\n    }\n  }\n}\n"]}