{"version":3,"sources":["waves/waves.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;yBAII,kBAFZ,gBAAgB,UAAhB,WACA,OAAO,OAAP,WAEE,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB;AAGD,iBAVW,OAUX,CAAY,OAAZ,EAAqB;gCAVV,SAUU;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CAFmB;SAArB;;AAVW,0BAeX,+BAAW;AACT,cAAI,UAAU,CAAC,cAAD,CAAV,CADK;AAET,cAAI,6BAA6B,KAAK,KAAL,CAAjC,EAA8C;AAC5C,oBAAQ,IAAR,CAAa,aAAb,EAD4C;WAA9C;AAGA,cAAI,6BAA6B,KAAK,MAAL,CAAjC,EAA+C;AAC7C,oBAAQ,IAAR,CAAa,cAAb,EAD6C;WAA/C;AAGA,cAAI,KAAK,KAAL,EAAY;AACd,oBAAQ,IAAR,YAAsB,KAAK,KAAL,CAAtB,CADc;WAAhB;;AAIA,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC,EAZS;AAaT,gBAAM,MAAN,CAAa,KAAK,OAAL,CAAb,CAbS;;;AAfA,0BA+BX,+BAAW;AACT,cAAI,UAAU,CAAC,cAAD,EAAiB,aAAjB,CAAV,CADK;AAET,cAAI,KAAK,KAAL,EAAY;AACd,oBAAQ,IAAR,YAAsB,KAAK,KAAL,CAAtB,CADc;WAAhB;;AAIA,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,OAApC,EANS;;;eA/BA;;;;iBAGA;;;;;iBAGC","file":"waves/waves.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customAttribute('md-waves')\n@inject(Element)\nexport class MdWaves {\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) block = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) circle = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) color;\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    let classes = ['waves-effect'];\n    if (getBooleanFromAttributeValue(this.block)) {\n      classes.push('waves-block');\n    }\n    if (getBooleanFromAttributeValue(this.circle)) {\n      classes.push('waves-circle');\n    }\n    if (this.color) {\n      classes.push(`waves-${this.color}`);\n    }\n\n    this.attributeManager.addClasses(classes);\n    Waves.attach(this.element);\n  }\n\n  detached() {\n    let classes = ['waves-effect', 'waves-block'];\n    if (this.color) {\n      classes.push(`waves-${this.color}`);\n    }\n\n    this.attributeManager.removeClasses(classes);\n  }\n}\n"]}