{"version":3,"sources":["carousel/carousel.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ;AAAU;AAAU;;AACpB;;AACA;;AACA;;AACA;;;4BAIK,qBAFZ,cAAc,aAAd,WACA,OAAO,OAAP,EAAgB,SAAhB,WAEE,oBACA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS,kBAAT;AAED,iBAPW,UAOX,CAAY,OAAZ,EAAqB,SAArB,EAAgC;gCAPrB,YAOqB;;;;;;;;AAC9B,eAAK,OAAL,GAAe,OAAf,CAD8B;AAE9B,eAAK,SAAL,GAAiB,SAAjB,CAF8B;SAAhC;;AAPW,6BAYX,+BAAW;AACT,cAAI,6BAA6B,KAAK,QAAL,CAAjC,EAAiD;AAC/C,iBAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,iBAA3B,EAD+C;WAAjD;;AAUA,eAAK,OAAL,GAXS;;;AAZA,6BA0BX,qCAAa,UAAU;AACrB,eAAK,OAAL,GADqB;;;AA1BZ,6BA8BX,6BAAU;;;AACR,cAAI,KAAK,KAAL,CAAW,MAAX,GAAoB,CAApB,EAAuB;;AACzB,kBAAI,UAAU;AACZ,4BAAY,6BAA6B,MAAK,QAAL,CAAzC;AACA,4BAAY,MAAK,YAAL;eAFV;;AAKJ,oBAAK,SAAL,CAAe,SAAf,CAAyB,YAAM;AAC7B,kBAAE,MAAK,OAAL,CAAF,CAAgB,QAAhB,CAAyB,OAAzB,EAD6B;eAAN,CAAzB;iBANyB;WAA3B;;;eA/BS;;;;iBACgB;;;;;iBAGb;;;;;iBACwB","file":"carousel/carousel.js","sourceRoot":"/source/","sourcesContent":["import {bindable, children, customElement} from 'aurelia-templating';\nimport {bindingMode} from 'aurelia-binding';\nimport {inject} from 'aurelia-dependency-injection';\nimport {TaskQueue} from 'aurelia-task-queue';\nimport {getBooleanFromAttributeValue} from '../common/attributes';\n\n@customElement('md-carousel')\n@inject(Element, TaskQueue)\nexport class MdCarousel {\n  @bindable() mdIndicators = true;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdSlider = false;\n  @children('md-carousel-item') items = [];\n\n  constructor(element, taskQueue) {\n    this.element = element;\n    this.taskQueue = taskQueue;\n  }\n\n  attached() {\n    if (getBooleanFromAttributeValue(this.mdSlider)) {\n      this.element.classList.add('carousel-slider');\n    }\n\n    // workaround for: https://github.com/Dogfalo/materialize/issues/2741\n    // if (getBooleanFromAttributeValue(this.mdSlider)) {\n    //   $(this.element).carousel({full_width: true});\n    // } else {\n    //   $(this.element).carousel();\n    // }\n    this.refresh();\n  }\n\n  itemsChanged(newValue) {\n    this.refresh();\n  }\n\n  refresh() {\n    if (this.items.length > 0) {\n      let options = {\n        full_width: getBooleanFromAttributeValue(this.mdSlider),\n        indicators: this.mdIndicators\n      };\n\n      this.taskQueue.queueTask(() => {\n        $(this.element).carousel(options);\n      });\n    }\n  }\n}\n"]}